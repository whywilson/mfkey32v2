// generated bindings.dart

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/mfkey32.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`
///
class Mfkey32_Library {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Mfkey32_Library(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Mfkey32_Library.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int mfkey32(
    ffi.Pointer<Mfkey32> data,
  ) {
    return _mfkey32(
      data,
    );
  }

  late final _mfkey32Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<Mfkey32>)>>(
          'mfkey32');
  late final _mfkey32 =
      _mfkey32Ptr.asFunction<int Function(ffi.Pointer<Mfkey32>)>();
}

final class Mfkey32 extends ffi.Struct {
  /// serial number
  @ffi.Uint32()
  external int uid;

  /// tag challenge first
  @ffi.Uint32()
  external int nt0;

  /// tag challenge second
  @ffi.Uint32()
  external int nt1;

  /// first encrypted reader challenge
  @ffi.Uint32()
  external int nr0_enc;

  /// first encrypted reader response
  @ffi.Uint32()
  external int ar0_enc;

  /// second encrypted reader challenge
  @ffi.Uint32()
  external int nr1_enc;

  /// second encrypted reader response
  @ffi.Uint32()
  external int ar1_enc;
}
